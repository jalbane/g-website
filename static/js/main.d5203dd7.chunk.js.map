{"version":3,"sources":["serviceWorker.js","Roster.js","Home.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Roster","spec","index","this","props","itemList","key","raider","character","role","className","id","href","name","target","src","thumbnail","alt","Component","Home","to","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qFCOSC,E,iLApBb,IACIC,EADAC,EAAQC,KAAKC,MAAMC,SAASC,IAUhC,MAR8D,SAA1DH,KAAKC,MAAMC,SAASE,OAAOL,GAAOM,UAAUP,KAAKQ,KACpDR,EAAO,OAC2D,YAA1DE,KAAKC,MAAMC,SAASE,OAAOL,GAAOM,UAAUP,KAAKQ,KACzDR,EAAO,SAC2D,QAA1DE,KAAKC,MAAMC,SAASE,OAAOL,GAAOM,UAAUP,KAAKQ,OACzDR,EAAO,OACRE,KAAKC,MAAMC,SAASC,MAGlB,yBAAKI,UAAY,OAChB,0BAAMA,UAAY,QAAQ,uBAAGC,GAAK,WAAWC,KAAI,sDAAmDT,KAAKC,MAAMC,SAASE,OAAOL,GAAOM,UAAUK,MAAQC,OAAS,UAAU,yBAAKC,IAAG,0DAAuDZ,KAAKC,MAAMC,SAASE,OAAOL,GAAOM,UAAUQ,WAAaC,IAAM,qBACzS,0BAAMP,UAAY,QAASP,KAAKC,MAAMC,SAASE,OAAOL,GAAOM,UAAUK,KAAvE,KACA,0BAAMH,UAAY,QAASP,KAAKC,MAAMC,SAASE,OAAOL,GAAOM,UAAUP,KAAKY,KAA5E,KACA,0BAAMH,UAAY,QAAST,EAA3B,U,GAjBgBiB,a,4CC0BNC,GClBGD,Y,iLDLjB,OACC,kBAAC,IAAD,KACC,6BACC,6BACC,4BACC,4BACC,kBAAC,IAAD,CAAME,GAAG,KAAT,SAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,WAAT,aAIF,kBAAC,IAAD,CACCC,KAAK,IACSC,UAAWH,U,GAjBZD,cEGnBK,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SJ0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d5203dd7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Roster extends Component{\r\n\trender(){\r\n\t\tlet index = this.props.itemList.key\r\n\t\tlet spec \r\n\t\tif (this.props.itemList.raider[index].character.spec.role === 'TANK')\r\n\t\t\tspec = 'Tank'\t\t\r\n\t\telse if (this.props.itemList.raider[index].character.spec.role === 'HEALING')\r\n\t\t\tspec = 'Healer'\r\n\t\telse if (this.props.itemList.raider[index].character.spec.role === 'DPS')\r\n\t\t\tspec = 'Dps'\r\n\t\tthis.props.itemList.key++\r\n\r\n\t\treturn (\r\n\t\t\t\t<div className = \"row\">\r\n\t\t\t\t\t<span className = 'cell' ><a id = \"redirect\" href = {`https://raider.io/character/us/lightbringer/${this.props.itemList.raider[index].character.name}`} target = \"_blank\" ><img src = {`https://render-us.worldofwarcraft.com/character/${this.props.itemList.raider[index].character.thumbnail}`} alt = \"char_thumbnail\"/></a></span>\r\n\t\t\t\t\t<span className = 'cell' >{this.props.itemList.raider[index].character.name} </span>\r\n\t\t\t\t\t<span className = 'cell' >{this.props.itemList.raider[index].character.spec.name} </span>\r\n\t\t\t\t\t<span className = 'cell' >{spec} </span>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default Roster;","import React, {Component} from 'react';\r\nimport {Link, BrowserRouter, Route} from 'react-router-dom';\r\nimport App from './App';\r\n\r\nclass Home extends Component{\r\n\trender(){\r\n\treturn(\r\n\t\t<BrowserRouter>\r\n\t\t\t<div>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/roster\">Roster</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t        </nav>\r\n\t\t \t\t<Route\r\n\t\t \t\t\tpath=\"/\"\r\n                    component={Home}\r\n                    /> \r\n\t    \t</div>\r\n\t\t</BrowserRouter>\r\n    );\r\n\t}\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\nimport Roster from './Roster'\nimport './App.css';\nimport 'tachyons';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\n\n\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state ={ \n      blizzResponse: '',\n      loading: true,\n      raider: [\n        \n      ],\n      key: 0\n    };\n  }\n\n  async componentDidMount(){\n    let response = await fetch(\"https://us.battle.net/oauth/token\",{ \n              method: \"POST\",\n              body: \"grant_type=client_credentials\",\n              headers: {\n                Authorization: \"Basic ODExNmYzNGI1NmY2NGM4ZTlkMDJhYWI2MjY1MjNjMzU6d2FscVFOYTBTZjRKa0MweTBxSllHNk5tRjFuYjJTd3A=\",\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              }\n            })\n    let data = await response.json()\n    this.setState({blizzResponse: data})\n    let url = 'https://us.api.blizzard.com/wow/guild/Lightbringer/NFA?fields=members&locale=en_US&access_token='\n    url += this.state.blizzResponse.access_token\n    let apiResponse = await fetch(url)\n    let guildData = await apiResponse.json()\n    let i = 0\n    let j = 0\n    while (i < guildData.members.length){\n      if (guildData.members[i].rank !== 2 && guildData.members[i].rank < 5)\n      {\n        this.state.raider[j] = guildData.members[i]\n        j++\n      }\n      i++\n    }\n    this.setState({loading: false})\n  }\n\n  render(){ \n    let item = this.state\n    return (\n      <div>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"Rankings.js\">Home</Nav.Link>\n              <Nav.Link href=\"Roster.js\">Roster</Nav.Link>\n              <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      <div className=\"App\">\n          {this.state.loading ? <div><h1>Loading...</h1></div>: \n            <div className = \"Faketable\"> \n              {/* this div is part of the ternary operator*/}\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n            </div>\n          } \n      </div> \n    </div>);\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home'\n\nReactDOM.render(<Home />, document.getElementById('root'));\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}