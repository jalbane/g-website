{"version":3,"sources":["Roster.js","App.js","serviceWorker.js","Rankings.js","Home.js","index.js"],"names":["Roster","spec","index","this","props","itemList","key","raider","character","role","id","className","href","name","target","rel","src","thumbnail","alt","Component","App","state","blizzResponse","loading","fetch","method","body","headers","Authorization","response","json","data","setState","url","access_token","apiResponse","guildData","i","j","members","length","rank","item","Boolean","window","location","hostname","match","Rankings","uldir","summary","React","Home","bod","cos","tep","raid_progression","console","log","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","to","NavDropdown","title","Item","Divider","path","component","exact","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a50399a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './roster.css'\r\n\r\n\r\nclass Roster extends Component{\r\n\trender(){\r\n\t\tlet index = this.props.itemList.key\r\n\t\tlet spec \r\n\t\tif (this.props.itemList.raider[index].character.spec.role === 'TANK')\r\n\t\t\tspec = 'Tank'\t\t\r\n\t\telse if (this.props.itemList.raider[index].character.spec.role === 'HEALING')\r\n\t\t\tspec = 'Healer'\r\n\t\telse if (this.props.itemList.raider[index].character.spec.role === 'DPS')\r\n\t\t\tspec = 'Dps'\r\n\t\tthis.props.itemList.key++\r\n\r\n\t\treturn (\r\n\t\t\t\t<div id = \"row\">\r\n\t\t\t\t\t<span className = 'cell' ><a id = \"redirect\" href = {`https://raider.io/character/us/lightbringer/${this.props.itemList.raider[index].character.name}`} target = \"_blank\" rel=\"noopener noreferrer\" ><img src = {`https://render-us.worldofwarcraft.com/character/${this.props.itemList.raider[index].character.thumbnail}`} alt = \"char_thumbnail\"/></a></span>\r\n\t\t\t\t\t<span className = 'cell' >{this.props.itemList.raider[index].character.name} </span>\r\n\t\t\t\t\t<span className = 'cell' >{this.props.itemList.raider[index].character.spec.name} </span>\r\n\t\t\t\t\t<span className = 'cell' >{spec} </span>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default Roster;","import React, {Component} from 'react';\nimport Roster from './Roster'\nimport './App.css';\nimport 'tachyons';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\n\n\n\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state ={ \n      blizzResponse: '',\n      loading: true,\n      raider: [\n        \n      ],\n      key: 0\n    };\n  }\n\n  async componentDidMount(){\n    let response = await fetch(\"https://us.battle.net/oauth/token\",{ \n              method: \"POST\",\n              body: \"grant_type=client_credentials\",\n              headers: {\n                Authorization: \"Basic ODExNmYzNGI1NmY2NGM4ZTlkMDJhYWI2MjY1MjNjMzU6d2FscVFOYTBTZjRKa0MweTBxSllHNk5tRjFuYjJTd3A=\",\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              }\n            })\n    let data = await response.json()\n    this.setState({blizzResponse: data})\n    let url = 'https://us.api.blizzard.com/wow/guild/Lightbringer/NFA?fields=members&locale=en_US&access_token='\n    url += this.state.blizzResponse.access_token\n    let apiResponse = await fetch(url)\n    let guildData = await apiResponse.json()\n    let i = 0\n    let j = 0\n    while (i < guildData.members.length){\n      if (guildData.members[i].rank !== 2 && guildData.members[i].rank < 5)\n      {\n        this.state.raider[j] = guildData.members[i]\n        j++\n      }\n      i++\n    }\n    this.setState({loading: false})\n  }\n\n  render(){ \n    let item = this.state\n    return (\n      <div className=\"App\">\n        \n      <div >\n          <div className = \"Faketable\"> \n          {this.state.loading ? <div><h1>Loading...</h1></div>: \n            <div>\n              {/* this div is part of the ternary operator*/}\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n              <Roster itemList = {item}/>\n            </div>\n          }\n          </div> \n      </div> \n    </div>);\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nclass Rankings extends React.Component{\r\n\trender(){\r\n\treturn (\r\n\t\t\t<div>\r\n\t    \t\t {this.props.data.uldir.summary}\r\n\t    \t\t asdfasdf <br />\r\n\t    \t\t <br />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Rankings;","import React, {Component} from 'react';\r\nimport {Link, BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\nimport Rankings from './Rankings'\r\n\r\nclass Home extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tbod: {\r\n\r\n\t\t\t}\r\n\t\t\r\n\t\t\t,\r\n\t\t\tuldir: {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t,\r\n\t\t\tcos: {}\r\n\t\r\n\t\t\t,\r\n\t\t\ttep: {}\r\n\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tasync componentDidMount(){\r\n\t\tlet response= await fetch('https://raider.io/api/v1/guilds/profile?region=US&realm=Lightbringer&name=NFA&fields=raid_progression')\r\n\t\tlet data = await response.json()\r\n\t\tthis.setState({uldir: data.raid_progression.uldir})\r\n\t\tthis.setState({bod: data.raid_progression[\"battle-of-dazaralor\"]})\r\n\t\tconsole.log(this.state)\r\n\t\t/*this.setState({uldir: data})\r\n\t\t\r\n\t\tthis.state.uldir.summary = data.raid_progression.uldir.summary\r\n\t\tthis.state.bod.summary = data.raid_progression[\"battle-of-dazaralor\"].summary\r\n\t\tthis.state.cos.summary = data.raid_progression[\"crucible-of-storms\"].summary\r\n\t\tthis.state.tep.summary = data.raid_progression[\"the-eternal-palace\"].summary\r\n\t\tresponse = await fetch('https://raider.io/api/v1/guilds/profile?region=US&realm=Lightbringer&name=NFA&fields=raid_rankings')\r\n\t\tdata = await response.json()\r\n\t\tthis.state.uldir.world = data.raid_rankings.uldir.mythic.world\r\n\t\tthis.state.uldir.realm = data.raid_rankings.uldir.mythic.realm\r\n\t\tthis.state.bod.realm = data.raid_rankings[\"battle-of-dazaralor\"].mythic.realm\r\n\t\tthis.state.bod.world = data.raid_rankings[\"battle-of-dazaralor\"].mythic.world\r\n\t\tthis.state.cos.realm = data.raid_rankings[\"crucible-of-storms\"].mythic.realm\r\n\t\tthis.state.cos.world = data.raid_rankings[\"crucible-of-storms\"].mythic.world\r\n\t\tthis.state.tep.realm = data.raid_rankings[\"the-eternal-palace\"].mythic.realm\r\n\t\tthis.state.tep.world = data.raid_rankings[\"the-eternal-palace\"].mythic.world\r\n\t*/}\r\n\trender(){\r\n\tlet item\r\n\titem = this.state\r\n\treturn(\r\n\t\t\r\n\t\t<BrowserRouter>\r\n\t\t\t<Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"/Home\"><Link to=\"\">Home</Link></Nav.Link>\r\n              <Nav.Link href=\"Roster.js\"><Link to=\"/App\">Roster</Link></Nav.Link>\r\n              <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\t\t\r\n\t\t \t\t<Switch>\r\n\t\t\t \t\t<Route path=\"/Home\" component={Home} exact/> \r\n\t\t\t \t\t<Route path=\"/App\" component={App} exact/> \r\n                </Switch>\r\n                <Rankings data = {item} />\r\n\t\t</BrowserRouter>\r\n    );\r\n\t}\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home'\n\nReactDOM.render(<Home />, document.getElementById('root'));\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}